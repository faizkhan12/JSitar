{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/faiz/react-tutorial/readme-generator/jstrings/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{useTypedSelector}from\"./use-typed-selector\";// logic for keeping reference to the previous code cell\nexport var useCumulativeCode=function useCumulativeCode(cellId){return useTypedSelector(function(state){var _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;var orderCells=order.map(function(id){return data[id];});/**\n     * this html snippet below actually declaring print function where if you\n     * passed any arguments inside this fn in code editor, it will\n     * display that value in preview screen\n     * For example - const a = 10; print(a) - this will show\n     * 10 in preview screen\n     */var printFunc=\"\\n        import _React from 'react';\\n        import _ReactDOM from 'react-dom';\\n        var print = (value) => {\\n          const root = document.querySelector('#root');\\n        \\n          if (typeof value === 'object') {\\n            if (value.$$typeof && value.props) {\\n              _ReactDOM.render(value, root);\\n            } else {\\n            root.innerHTML = JSON.stringify(value);\\n          }\\n        }\\n          else {\\n            root.innerHTML = value;\\n          }\\n        };\\n        \";var printFuncNoop=\"var print = () => {}\";var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;// if cell type is code then we are interested\nif(c.type===\"code\"){if(c.id===cellId){cumulativeCode.push(printFunc);}else{cumulativeCode.push(printFuncNoop);}cumulativeCode.push(c.content);}// if come to current cell then we don't have to push in the cumulativeCode\nif(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join(\"\\n\");};","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/jstrings/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderCells","map","id","printFunc","printFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":"wNAAA,OAASA,gBAAT,KAAiC,sBAAjC,CAEA;AACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAoB,CACnD,MAAOF,CAAAA,gBAAgB,CAAC,SAACG,KAAD,CAAW,kBACTA,KAAK,CAACC,KADG,CACzBC,IADyB,cACzBA,IADyB,CACnBC,KADmB,cACnBA,KADmB,CAEjC,GAAMC,CAAAA,UAAU,CAAGD,KAAK,CAACE,GAAN,CAAU,SAACC,EAAD,QAAQJ,CAAAA,IAAI,CAACI,EAAD,CAAZ,EAAV,CAAnB,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA,OACI,GAAMC,CAAAA,SAAS,kgBAAf,CAkBA,GAAMC,CAAAA,aAAa,uBAAnB,CACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CA9BiC,yCA+BnBL,UA/BmB,YA+BjC,+CAA0B,IAAjBM,CAAAA,CAAiB,aACxB;AACA,GAAIA,CAAC,CAACC,IAAF,GAAW,MAAf,CAAuB,CACrB,GAAID,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACnBU,cAAc,CAACG,IAAf,CAAoBL,SAApB,EACD,CAFD,IAEO,CACLE,cAAc,CAACG,IAAf,CAAoBJ,aAApB,EACD,CACDC,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB,EACD,CACD;AACA,GAAIH,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACnB,MACD,CACF,CA7CgC,qDA8CjC,MAAOU,CAAAA,cAAP,CACD,CA/CsB,CAAhB,CA+CJK,IA/CI,CA+CC,IA/CD,CAAP,CAgDD,CAjDM","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\"\n\n// logic for keeping reference to the previous code cell\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells\n    const orderCells = order.map((id) => data[id])\n\n    /**\n     * this html snippet below actually declaring print function where if you\n     * passed any arguments inside this fn in code editor, it will\n     * display that value in preview screen\n     * For example - const a = 10; print(a) - this will show\n     * 10 in preview screen\n     */\n    const printFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var print = (value) => {\n          const root = document.querySelector('#root');\n        \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n            root.innerHTML = JSON.stringify(value);\n          }\n        }\n          else {\n            root.innerHTML = value;\n          }\n        };\n        `\n    const printFuncNoop = `var print = () => {}`\n    const cumulativeCode = []\n    for (let c of orderCells) {\n      // if cell type is code then we are interested\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(printFunc)\n        } else {\n          cumulativeCode.push(printFuncNoop)\n        }\n        cumulativeCode.push(c.content)\n      }\n      // if come to current cell then we don't have to push in the cumulativeCode\n      if (c.id === cellId) {\n        break\n      }\n    }\n    return cumulativeCode\n  }).join(\"\\n\")\n}\n"]},"metadata":{},"sourceType":"module"}