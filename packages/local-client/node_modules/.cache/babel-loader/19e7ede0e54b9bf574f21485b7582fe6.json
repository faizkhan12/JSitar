{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import'./code-editor.css';import'./syntax.css';import{useRef}from'react';import MonacoEditor from'@monaco-editor/react';import prettier from'prettier';import parser from'prettier/parser-babel';import codeShift from'jscodeshift';import Highlighter from'monaco-jsx-highlighter';var CodeEditor=function CodeEditor(_ref){var onChange=_ref.onChange,initialValue=_ref.initialValue;var editorRef=useRef();var onEditorDidMount=function onEditorDidMount(getValue,monacoEditor){var _monacoEditor$getMode;editorRef.current=monacoEditor;monacoEditor.onDidChangeModelContent(function(){onChange(getValue());});(_monacoEditor$getMode=monacoEditor.getModel())===null||_monacoEditor$getMode===void 0?void 0:_monacoEditor$getMode.updateOptions({tabSize:2});var highlighter=new Highlighter(// @ts-ignore\nwindow.monaco,codeShift,monacoEditor);highlighter.highLightOnDidChangeModelContent(function(){},function(){},undefined,function(){});};var onFormatClick=function onFormatClick(){// get current value from editor\nvar unformatted=editorRef.current.getModel().getValue();// format that value\nvar formatted=prettier.format(unformatted,{parser:'babel',plugins:[parser],useTabs:false,semi:true,singleQuote:true}).replace(/\\n$/,'');// set the formatted value back in the editor\neditorRef.current.setValue(formatted);};return/*#__PURE__*/_jsxs(\"div\",{className:\"editor-wrapper\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button button-format is-primary is-small\",onClick:onFormatClick,children:\"Format\"}),/*#__PURE__*/_jsx(MonacoEditor,{editorDidMount:onEditorDidMount,value:initialValue,theme:\"dark\",language:\"javascript\",height:\"100%\",options:{wordWrap:'on',minimap:{enabled:false},showUnused:false,folding:false,lineNumbersMinChars:3,fontSize:16,scrollBeyondLastLine:false,automaticLayout:true}})]});};export default CodeEditor;","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/jstrings/packages/local-client/src/components/code-editor.tsx"],"names":["useRef","MonacoEditor","prettier","parser","codeShift","Highlighter","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":"wFAAA,MAAO,mBAAP,CACA,MAAO,cAAP,CACA,OAASA,MAAT,KAAuB,OAAvB,CACA,MAAOC,CAAAA,YAAP,KAA6C,sBAA7C,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CAOA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAgC,IAA7BC,CAAAA,QAA6B,MAA7BA,QAA6B,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC5E,GAAMC,CAAAA,SAAS,CAAGT,MAAM,EAAxB,CAEA,GAAMU,CAAAA,gBAAgC,CAAG,QAAnCA,CAAAA,gBAAmC,CAACC,QAAD,CAAWC,YAAX,CAA4B,2BACnEH,SAAS,CAACI,OAAV,CAAoBD,YAApB,CACAA,YAAY,CAACE,uBAAb,CAAqC,UAAM,CACzCP,QAAQ,CAACI,QAAQ,EAAT,CAAR,CACD,CAFD,EAIA,uBAAAC,YAAY,CAACG,QAAb,wEAAyBC,aAAzB,CAAuC,CAAEC,OAAO,CAAE,CAAX,CAAvC,EAEA,GAAMC,CAAAA,WAAW,CAAG,GAAIb,CAAAA,WAAJ,CAClB;AACAc,MAAM,CAACC,MAFW,CAGlBhB,SAHkB,CAIlBQ,YAJkB,CAApB,CAMAM,WAAW,CAACG,gCAAZ,CACE,UAAM,CAAE,CADV,CAEE,UAAM,CAAE,CAFV,CAGEC,SAHF,CAIE,UAAM,CAAE,CAJV,EAMD,CApBD,CAsBA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B;AACA,GAAMC,CAAAA,WAAW,CAAGf,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAEA;AACA,GAAMc,CAAAA,SAAS,CAAGvB,QAAQ,CACvBwB,MADe,CACRF,WADQ,CACK,CACnBrB,MAAM,CAAE,OADW,CAEnBwB,OAAO,CAAE,CAACxB,MAAD,CAFU,CAGnByB,OAAO,CAAE,KAHU,CAInBC,IAAI,CAAE,IAJa,CAKnBC,WAAW,CAAE,IALM,CADL,EAQfC,OARe,CAQP,KARO,CAQA,EARA,CAAlB,CAUA;AACAtB,SAAS,CAACI,OAAV,CAAkBmB,QAAlB,CAA2BP,SAA3B,EACD,CAjBD,CAmBA,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,eACE,SAAS,CAAC,0CADZ,CAEE,OAAO,CAAEF,aAFX,oBADF,cAOE,KAAC,YAAD,EACE,cAAc,CAAEb,gBADlB,CAEE,KAAK,CAAEF,YAFT,CAGE,KAAK,CAAC,MAHR,CAIE,QAAQ,CAAC,YAJX,CAKE,MAAM,CAAC,MALT,CAME,OAAO,CAAE,CACPyB,QAAQ,CAAE,IADH,CAEPC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAX,CAFF,CAGPC,UAAU,CAAE,KAHL,CAIPC,OAAO,CAAE,KAJF,CAKPC,mBAAmB,CAAE,CALd,CAMPC,QAAQ,CAAE,EANH,CAOPC,oBAAoB,CAAE,KAPf,CAQPC,eAAe,CAAE,IARV,CANX,EAPF,GADF,CA2BD,CAvED,CAyEA,cAAenC,CAAAA,UAAf","sourcesContent":["import './code-editor.css';\nimport './syntax.css';\nimport { useRef } from 'react';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter';\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const editorRef = useRef<any>();\n\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n\n    const highlighter = new Highlighter(\n      // @ts-ignore\n      window.monaco,\n      codeShift,\n      monacoEditor\n    );\n    highlighter.highLightOnDidChangeModelContent(\n      () => {},\n      () => {},\n      undefined,\n      () => {}\n    );\n  };\n\n  const onFormatClick = () => {\n    // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue();\n\n    // format that value\n    const formatted = prettier\n      .format(unformatted, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      })\n      .replace(/\\n$/, '');\n\n    // set the formatted value back in the editor\n    editorRef.current.setValue(formatted);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        editorDidMount={onEditorDidMount}\n        value={initialValue}\n        theme=\"dark\"\n        language=\"javascript\"\n        height=\"100%\"\n        options={{\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}