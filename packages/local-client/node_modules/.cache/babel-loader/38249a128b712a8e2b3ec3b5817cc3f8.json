{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"./use-typed-selector\"; // logic for keeping reference to the previous code cell\n\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderCells = order.map(id => data[id]);\n    /**\n     * this html snippet below actually declaring print function where if you\n     * passed any arguments inside this fn in code editor, it will\n     * display that value in preview screen\n     * For example - const a = 10; print(a) - this will show\n     * 10 in preview screen\n     */\n\n    const printFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var print = (value) => {\n          const root = document.querySelector('#root');\n        \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n            root.innerHTML = JSON.stringify(value);\n          }\n        }\n          else {\n            root.innerHTML = value;\n          }\n        };\n        `;\n    const printFuncNoop = `var print = () => {}`;\n    const cumulativeCode = [];\n\n    for (let c of orderCells) {\n      // if cell type is code then we are interested\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(printFunc);\n        } else {\n          cumulativeCode.push(printFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      } // if come to current cell then we don't have to push in the cumulativeCode\n\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  }).join(\"\\n\");\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderCells","map","id","printFunc","printFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACnD,SAAOF,gBAAgB,CAAEG,KAAD,IAAW;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,UAAU,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAAnB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAMC,SAAS,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAjBI;AAkBA,UAAMC,aAAa,GAAI,sBAAvB;AACA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,UAAd,EAA0B;AACxB;AACA,UAAIM,CAAC,CAACC,IAAF,KAAW,MAAf,EAAuB;AACrB,YAAID,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACnBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,SAApB;AACD,SAFD,MAEO;AACLE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,aAApB;AACD;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACD,OATuB,CAUxB;;;AACA,UAAIH,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACnB;AACD;AACF;;AACD,WAAOU,cAAP;AACD,GA/CsB,CAAhB,CA+CJK,IA/CI,CA+CC,IA/CD,CAAP;AAgDD,CAjDM;;GAAMhB,iB;UACJD,gB","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\"\n\n// logic for keeping reference to the previous code cell\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells\n    const orderCells = order.map((id) => data[id])\n\n    /**\n     * this html snippet below actually declaring print function where if you\n     * passed any arguments inside this fn in code editor, it will\n     * display that value in preview screen\n     * For example - const a = 10; print(a) - this will show\n     * 10 in preview screen\n     */\n    const printFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var print = (value) => {\n          const root = document.querySelector('#root');\n        \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n            root.innerHTML = JSON.stringify(value);\n          }\n        }\n          else {\n            root.innerHTML = value;\n          }\n        };\n        `\n    const printFuncNoop = `var print = () => {}`\n    const cumulativeCode = []\n    for (let c of orderCells) {\n      // if cell type is code then we are interested\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(printFunc)\n        } else {\n          cumulativeCode.push(printFuncNoop)\n        }\n        cumulativeCode.push(c.content)\n      }\n      // if come to current cell then we don't have to push in the cumulativeCode\n      if (c.id === cellId) {\n        break\n      }\n    }\n    return cumulativeCode\n  }).join(\"\\n\")\n}\n"]},"metadata":{},"sourceType":"module"}