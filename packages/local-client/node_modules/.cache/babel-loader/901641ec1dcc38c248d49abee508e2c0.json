{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/faiz/react-tutorial/readme-generator/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CodeEditor from \"./code-editor\";\nimport Resizable from \"./resizable\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  useTypedSelector(state => {\n    state.bundles[cell.id];\n  });\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 10px)\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"1ZQTotjuN1C3ZPvZHzIRoETFuiw=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/src/components/code-cell.tsx"],"names":["useEffect","useActions","useTypedSelector","CodeEditor","Resizable","CodeCell","cell","updateCell","createBundle","state","bundles","id","timer","setTimeout","content","clearTimeout","height","display","flexDirection","value"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BP,UAAU,EAA/C;AACAC,EAAAA,gBAAgB,CAAEO,KAAD,IAAW;AAC1BA,IAAAA,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACK,EAAnB;AACD,GAFe,CAAhB;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCL,MAAAA,YAAY,CAACF,IAAI,CAACK,EAAN,EAAUL,IAAI,CAACQ,OAAf,CAAZ;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,CAACN,IAAI,CAACQ,OAAN,EAAeR,IAAI,CAACK,EAApB,CARM,CAAT;AAUA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLK,QAAAA,MAAM,EAAE,mBADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA,6BAOE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,YAAY,EAAEZ,IAAI,CAACQ,OADrB;AAEE,UAAA,QAAQ,EAAGK,KAAD,IAAWZ,UAAU,CAACD,IAAI,CAACK,EAAN,EAAUQ,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAnCD;;GAAMd,Q;UACiCJ,U,EACrCC,gB;;;KAFIG,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import { useEffect } from \"react\"\nimport { useActions } from \"../hooks/use-actions\"\nimport { useTypedSelector } from \"../hooks/use-typed-selector\"\nimport { Cell } from \"../redux\"\nimport CodeEditor from \"./code-editor\"\nimport Resizable from \"./resizable\"\n\ninterface CodeCellProps {\n  cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions()\n  useTypedSelector((state) => {\n    state.bundles[cell.id]\n  })\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content)\n    }, 750)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [cell.content, cell.id])\n\n  return (\n    <Resizable direction='vertical'>\n      <div\n        style={{\n          height: \"calc(100% - 10px)\",\n          display: \"flex\",\n          flexDirection: \"row\",\n        }}\n      >\n        <Resizable direction='horizontal'>\n          <CodeEditor\n            initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        {/* <Preview code={code} err={err} /> */}\n      </div>\n    </Resizable>\n  )\n}\n\nexport default CodeCell\n"]},"metadata":{},"sourceType":"module"}