{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/faiz/react-tutorial/readme-generator/jstrings/packages/local-client/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { useCumulativeCode } from \"../hooks/use-cumulative-code\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport \"./code-cell.css\";\nimport CodeEditor from \"./code-editor\";\nimport Preview from \"./preview\";\nimport Resizable from \"./resizable\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode);\n      return;\n    } // debounce logic\n\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle, cumulativeCode]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 10px)\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"YdvzI4JhxthmaOjy94Z5IgkoJ60=\", false, function () {\n  return [useActions, useTypedSelector, useCumulativeCode];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/jstrings/packages/local-client/src/components/code-cell.tsx"],"names":["useEffect","useActions","useCumulativeCode","useTypedSelector","CodeEditor","Preview","Resizable","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","timer","setTimeout","clearTimeout","content","height","display","flexDirection","value","loading","code","err"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,OAAO,iBAAP;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BT,UAAU,EAA/C;AACA,QAAMU,MAAM,GAAGR,gBAAgB,CAAES,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACA,QAAMC,cAAc,GAAGb,iBAAiB,CAACM,IAAI,CAACM,EAAN,CAAxC;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,MAAL,EAAa;AACXD,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAV,CAAZ;AACA;AACD,KAJa,CAMd;;;AACA,UAAMC,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCP,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAV,CAAZ;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD,CAXc,CAcd;AACD,GAfQ,EAeN,CAACR,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACM,EAApB,EAAwBJ,YAAxB,EAAsCK,cAAtC,CAfM,CAAT;AAiBA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLK,QAAAA,MAAM,EAAE,mBADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA,8BAOE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,YAAY,EAAEd,IAAI,CAACW,OADrB;AAEE,UAAA,QAAQ,EAAGI,KAAD,IAAWd,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUS,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACG,CAACZ,MAAD,IAAWA,MAAM,CAACa,OAAlB,gBACC;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACE;AAAU,YAAA,SAAS,EAAC,8BAApB;AAAmD,YAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADD,gBAOC,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEb,MAAM,CAACc,IAAtB;AAA4B,UAAA,GAAG,EAAEd,MAAM,CAACe;AAAxC;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAlDD;;GAAMnB,Q;UACiCN,U,EACtBE,gB,EACQD,iB;;;KAHnBK,Q;AAoDN,eAAeA,QAAf","sourcesContent":["import { useEffect } from \"react\"\nimport { useActions } from \"../hooks/use-actions\"\nimport { useCumulativeCode } from \"../hooks/use-cumulative-code\"\nimport { useTypedSelector } from \"../hooks/use-typed-selector\"\nimport { Cell } from \"../redux\"\nimport \"./code-cell.css\"\nimport CodeEditor from \"./code-editor\"\nimport Preview from \"./preview\"\nimport Resizable from \"./resizable\"\n\ninterface CodeCellProps {\n  cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions()\n  const bundle = useTypedSelector((state) => state.bundles[cell.id])\n  const cumulativeCode = useCumulativeCode(cell.id)\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode)\n      return\n    }\n\n    // debounce logic\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode)\n    }, 750)\n\n    return () => {\n      clearTimeout(timer)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle, cumulativeCode])\n\n  return (\n    <Resizable direction='vertical'>\n      <div\n        style={{\n          height: \"calc(100% - 10px)\",\n          display: \"flex\",\n          flexDirection: \"row\",\n        }}\n      >\n        <Resizable direction='horizontal'>\n          <CodeEditor\n            initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        <div className='progress-wrapper'>\n          {!bundle || bundle.loading ? (\n            <div className='progress-cover'>\n              <progress className='progress is-small is-primary' max='100'>\n                Loading\n              </progress>\n            </div>\n          ) : (\n            <Preview code={bundle.code} err={bundle.err} />\n          )}\n        </div>\n      </div>\n    </Resizable>\n  )\n}\n\nexport default CodeCell\n"]},"metadata":{},"sourceType":"module"}