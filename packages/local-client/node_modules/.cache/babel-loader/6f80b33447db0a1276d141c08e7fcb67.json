{"ast":null,"code":"var _store$getState$cells;\n\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { INSERT_CELL_BEFORE } from \"./action-types\";\nimport reducers from \"./reducers\";\nconst initialState = {};\nconst middleware = [thunk];\nexport const store = createStore(reducers, initialState, composeWithDevTools(applyMiddleware(...middleware))); // manually testing redux\n\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"code\"\n  }\n});\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"text\"\n  }\n});\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"code\"\n  }\n});\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"text\"\n  }\n});\nconst id = (_store$getState$cells = store.getState().cells) === null || _store$getState$cells === void 0 ? void 0 : _store$getState$cells.order[0];\nconsole.log(store.getState());","map":{"version":3,"sources":["/home/faiz/react-tutorial/readme-generator/src/redux/store.ts"],"names":["applyMiddleware","createStore","composeWithDevTools","thunk","INSERT_CELL_BEFORE","reducers","initialState","middleware","store","dispatch","type","payload","id","getState","cells","order","console","log"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,OAAO,MAAMK,KAAK,GAAGP,WAAW,CAC9BI,QAD8B,EAE9BC,YAF8B,EAG9BJ,mBAAmB,CAACF,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAHW,CAAzB,C,CAMP;;AACAC,KAAK,CAACC,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEN,kBADO;AAEbO,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE,IADG;AAEPF,IAAAA,IAAI,EAAE;AAFC;AAFI,CAAf;AAQAF,KAAK,CAACC,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEN,kBADO;AAEbO,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE,IADG;AAEPF,IAAAA,IAAI,EAAE;AAFC;AAFI,CAAf;AAQAF,KAAK,CAACC,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEN,kBADO;AAEbO,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE,IADG;AAEPF,IAAAA,IAAI,EAAE;AAFC;AAFI,CAAf;AAQAF,KAAK,CAACC,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEN,kBADO;AAEbO,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE,IADG;AAEPF,IAAAA,IAAI,EAAE;AAFC;AAFI,CAAf;AAQA,MAAME,EAAE,4BAAGJ,KAAK,CAACK,QAAN,GAAiBC,KAApB,0DAAG,sBAAwBC,KAAxB,CAA8B,CAA9B,CAAX;AAEAC,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACK,QAAN,EAAZ","sourcesContent":["import { applyMiddleware, createStore } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport thunk from \"redux-thunk\"\nimport { INSERT_CELL_BEFORE } from \"./action-types\"\nimport reducers from \"./reducers\"\n\nconst initialState = {}\nconst middleware = [thunk]\n\nexport const store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\n// manually testing redux\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"code\",\n  },\n})\n\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"text\",\n  },\n})\n\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"code\",\n  },\n})\n\nstore.dispatch({\n  type: INSERT_CELL_BEFORE,\n  payload: {\n    id: null,\n    type: \"text\",\n  },\n})\n\nconst id = store.getState().cells?.order[0]\n\nconsole.log(store.getState())\n"]},"metadata":{},"sourceType":"module"}